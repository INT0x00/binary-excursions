>> this article will be updated and amended as feedback / information comes in and i learn new things.
>> it is still a 'note', and will likely contain some inacurate information.
>> Once it is more matured and complete i will move it to the research section and clean up the layout and language.
>>
>> last update: 6/6/17

:: Intro
Writing code is hard, and tedious. No one likes hard and tedious things. 
This simple fact is the reason why so much shoddy and crap software is released. People don't have the motivation (they only like money or sex...) to
write decent code, test their code, and take pride in their craftmanship. Rich elites won't pay the
poor developer more to develop a beautiful product if they can sell a turd for just as much or more!
They pay the 'full stack java developer'  a shit ton for a brand new sqli vulnerable piece of crap though ;)....

Ofcourse there are people who do like tedious things, and luckily, they even like to share their thoughts on some dark places on the net.
I have collected some information and lessons from such people, and here will attempt to do my part in sharing this
regarding getting code to write code, and why we would want to do such a thing.
I won't give too much specifics, but in the binary-excursions project some code and information will
be included to show some of the things mentioned here.


:: Why write code that writes code?
There are a few simple goals you can have for writing code from code.
Here is a non exhaustive list:
	- poly/metamosphism
	- cross-platform support
	- reducing human error
	- reducing programming time spent
	- reduce repetitive tasks
	- self-modification (code (re)writing parts of itself or itself entirely)

So... let's go more into this!

:: If we have a bit of code which writes code, how would this look?
Basically, code which writes code, will output a file which is to be interpreted by yet another compiler or interpreter.
It can be in any kind of format you like, but generally, abstractions reduce complexity, so the output should be more complex
than the input script. (otherwise you are losing time!)

:: Byte-code? Interpreter?
A little information here. Byte-code is generally code which consists of just plain bytes.
Like machine code, it is interpreted directly from the binary information contained in the bytes without
any fancy headers or descrptive information.
An interpreter is a program which interpets input and produces output. This output in the case of this article
is actual machine code to run on the cpu. (like java or python byte-code which gets interpreted by their interpreters)
Interpreters usually work ' just in time' which means as opcodes need to be executed, they are decoded on the spot.
Regular compilers compile an entire source to binary / machine code and put it in a file format an operating system
can understand. (preferably... but you can render binary blobs or be creative with compiler scripts...)

:: Polywhatnow?
Poly and Metamorphism refer to tecniques used to produce varying binaries from a similar source.
These tecniques are commonly used by malware, content protection and security applications to obfuscate what a program is doing and to
evade signature based detections.

:Polymorphism:
polymorphism is the concept of a program that changes on each install, its a bit more broad and usually less deeply technical than metamorpic code
as this can change at the opcode level where a random install directory is already polymorphism. 

:Metamorphism
metamosphism is a technique where at the opcode level things are varied on each 'compile' so the byte code, functions and flow of the 
application totally changes. This tecnique is much harder to create signatures from as full dynamic analysis and state tracking is required.
This makes it so really only sandboxes have a chance of catching this. (and sandboxes can usually be fooled too in somtimes trivial ways... :-))

:: Compiling code which creates code
To compile code which creates code there are multiple methods to do this, but an obvious conclusion is that there will be code written.
Alot of it even. At start, you dont have any tools, and so, it's hard to even imagine where to start with this concept.

I will briefly go into a few general ideas and expand this section as i gain more knowledge and experience in this area myself.

- you need to make a set of tools or scripts which can produce code (obviously)
  ways to do it:
		- regex engine and write your own high level language which is compiled
		  into varying forms of the instructions (overlapping function, like add 1 or inc etc.)
		  this requires a large amount if assembly or perhaps c code templates to fill in via your regex engine based 'compiler'.

		- use macros for life... this is very tedious, but you can for instance make a file with
		  10 types of 'add 1' forms. then this file can be read by a script which interprets the original
		  source files and swaps instrucitons around. 
		 
		- some languages create a 'vm' or sort of elaborate interpreter to interpret 'bytecode', which is a
		  form of machinecode for this vm. the vm does all the translation to the underlying platform.
		  if the vm is multiplatoform then so is all the code running on it which is great.
		  (this is the approach which i will be exploring.)

	: there are more ways to go about this, you can be creative :)... but every way will be a hard way that's for sure!



	           
